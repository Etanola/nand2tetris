// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
    Mux16(a=x,b[0..15]=false,sel=zx,out=zx1);
    Not16(in=zx1,out=notzx1);
    Mux16(a=zx1,b=notzx1,sel=nx,out=nx1);

    Mux16(a=y,b[0..15]=false,sel=zy,out=zy1);
    Not16(in=zy1,out=notzy1);
    Mux16(a=zy1,b=notzy1,sel=ny,out=ny1);

    Add16(a=nx1,b=ny1,out=add1);
    Not16(in=add1,out=notadd1);
    Mux16(a=add1,b=notadd1,sel=no,out=no1);

    And16(a=nx1,b=ny1,out=and1);
    Not16(in=and1,out=notand1);
    Mux16(a=and1,b=notand1,sel=no,out=no2);

    Mux16(a=no2,b=no1,sel=f,out=out,out[0..7]=out0to7,out[8..15]=out8to15,out[15]=ng);

    Or8Way(in=out0to7,out=or1);
    Or8Way(in=out8to15,out=or2);
    Or(a=or1,b=or2,out=or3);
    Not(in=or3,out=zr);
}