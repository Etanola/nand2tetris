// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    // a command or dest=A -> load A register
    Not(in=instruction[15],out=acom);
    Or(a=acom, b=instruction[5], out=Aload);

    // instruction or aluout -> A register
    Mux16(a=instruction,b=aluout,sel=instruction[15],out=mux0out);
    ARegister(in=mux0out,load=Aload,out=Aout,out[0..14]=addressM);
    
    // A register or Memory -> ALU
    Mux16(a=Aout,b=inM,sel=instruction[12],out=AorMout);

    // dest=D -> load D register
    And(a=instruction[4], b=instruction[15], out=Dload);
    DRegister(in=aluout, load=Dload, out=Dout);

    // dest=M -> writeM
    And(a=instruction[3], b=instruction[15], out=writeM);

    // reset, A register -> pc
    PC(in=Aout,load=jmp,inc=inc,reset=reset,out[0..14]=pc);

    ALU(x=Dout,
        y=AorMout,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=outM,
        out=aluout,
        zr=zero,
        ng=neg);

    // zero, neg -> pos
    Or(a=zero, b=neg, out=or1);
    Not(in=or1, out=pos);

    // j1 and neg -> jmp
    And(a=instruction[2], b=neg, out=jmp1);

    // j2 and zero -> jmp
    And(a=instruction[1], b=zero, out=jmp2);

    // j3 and pos -> jmp
    And(a=instruction[0], b=pos, out=jmp3);

    Or(a=jmp1, b=jmp2, out=or2);
    Or(a=or2, b=jmp3, out=or3);
    And(a=instruction[15], b=or3, out=jmp);
    Not(in=jmp, out=inc);
}
